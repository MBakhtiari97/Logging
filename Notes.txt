Logging in C#:
-log is one of the most critical part of any application.
-we can log use the default c# log system or other libraries
-one of the most famous libraries for C# log is serilog and it is a must known
-log has some severity like log info (green) , warning log , critical log and so on
-logs are assosciated with categories and that allows us to configure things differently
-basic ways of log is combination of log category and log level
-what is that log level ? =>
it has to do with severity of the logs.
logs comes with different sizes
so :
LogDebug is one of the log levels (lowest severity)(in builtin logging provider)
LogTrace is another type of log levels
LogWarning is another log level
LogError is one other 
LogCritical is also another log level (highest severity)(in builtin logging provider)

also there is an enum for log levels and you can use it to remember log levels

    // Summary:
    //     Logs that contain the most detailed messages. These messages may contain sensitive
    //     application data. These messages are disabled by default and should never be
    //     enabled in a production environment.
    Trace,
    //
    // Summary:
    //     Logs that are used for interactive investigation during development. These logs
    //     should primarily contain information useful for debugging and have no long-term
    //     value.
    Debug,
    //
    // Summary:
    //     Logs that track the general flow of the application. These logs should have long-term
    //     value.
    Information,
    //
    // Summary:
    //     Logs that highlight an abnormal or unexpected event in the application flow,
    //     but do not otherwise cause the application execution to stop.
    Warning,
    //
    // Summary:
    //     Logs that highlight when the current flow of execution is stopped due to a failure.
    //     These should indicate a failure in the current activity, not an application-wide
    //     failure.
    Error,
    //
    // Summary:
    //     Logs that describe an unrecoverable application or system crash, or a catastrophic
    //     failure that requires immediate attention.
    Critical,
    //
    // Summary:
    //     Not used for writing log messages. Specifies that a logging category should not
    //     write any messages.
    None
-In logs you can define destinations to submit the log , like console , windows events , etc

--Modern .NET Logger:
-by default log is included (injected) in web api and minimal api controller and program files
-In new application types like blazor , also we can inject the ilogger and using them (like injecting
that in .razor file with @inject on top of the page and then use it in that specific page)
-The methods that previously mentioned (leike LogError , LogInformation , ...) are extension method , the
only three real method that logger has , is "Log , BeginScope , IsEnabled".
-Using (Simple logging) "Hello Log {0}", "Service" (Pass parameter) is fundamentally wrong in context of logging
because it is not enough and in different providers with large datasets it may leads to miss data replacement ,
instead we should use structral logging in these situations , becuase when we use this kind of logs , it depends to
provider that how to retreat with the datas and parameters !

14 